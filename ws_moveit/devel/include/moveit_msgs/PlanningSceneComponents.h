/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/p/peth8881/robotics/ws_moveit/src/moveit_msgs/msg/PlanningSceneComponents.msg
 *
 */


#ifndef MOVEIT_MSGS_MESSAGE_PLANNINGSCENECOMPONENTS_H
#define MOVEIT_MSGS_MESSAGE_PLANNINGSCENECOMPONENTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moveit_msgs
{
template <class ContainerAllocator>
struct PlanningSceneComponents_
{
  typedef PlanningSceneComponents_<ContainerAllocator> Type;

  PlanningSceneComponents_()
    : components(0)  {
    }
  PlanningSceneComponents_(const ContainerAllocator& _alloc)
    : components(0)  {
    }



   typedef uint32_t _components_type;
  _components_type components;


    enum { SCENE_SETTINGS = 1 };
     enum { ROBOT_STATE = 2 };
     enum { ROBOT_STATE_ATTACHED_OBJECTS = 4 };
     enum { WORLD_OBJECT_NAMES = 8 };
     enum { WORLD_OBJECT_GEOMETRY = 16 };
     enum { OCTOMAP = 32 };
     enum { TRANSFORMS = 64 };
     enum { ALLOWED_COLLISION_MATRIX = 128 };
     enum { LINK_PADDING_AND_SCALING = 256 };
     enum { OBJECT_COLORS = 512 };
 

  typedef boost::shared_ptr< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct PlanningSceneComponents_

typedef ::moveit_msgs::PlanningSceneComponents_<std::allocator<void> > PlanningSceneComponents;

typedef boost::shared_ptr< ::moveit_msgs::PlanningSceneComponents > PlanningSceneComponentsPtr;
typedef boost::shared_ptr< ::moveit_msgs::PlanningSceneComponents const> PlanningSceneComponentsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace moveit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/hydro/share/shape_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'moveit_msgs': ['/home/p/peth8881/robotics/ws_moveit/devel/share/moveit_msgs/msg', '/home/p/peth8881/robotics/ws_moveit/src/moveit_msgs/msg'], 'trajectory_msgs': ['/opt/ros/hydro/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/hydro/share/sensor_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/hydro/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/hydro/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/hydro/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc993e784476960b918b6e7ad5bb58ce";
  }

  static const char* value(const ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc993e784476960bULL;
  static const uint64_t static_value2 = 0x918b6e7ad5bb58ceULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_msgs/PlanningSceneComponents";
  }

  static const char* value(const ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message defines the components that make up the PlanningScene message.\n\
# The values can be used as a bitfield to specify which parts of the PlanningScene message\n\
# are of interest\n\
\n\
# Scene name, model name, model root\n\
uint32 SCENE_SETTINGS=1\n\
\n\
# Joint values of the robot state\n\
uint32 ROBOT_STATE=2\n\
\n\
# Attached objects (including geometry) for the robot state\n\
uint32 ROBOT_STATE_ATTACHED_OBJECTS=4\n\
\n\
# The names of the world objects\n\
uint32 WORLD_OBJECT_NAMES=8\n\
\n\
# The geometry of the world objects\n\
uint32 WORLD_OBJECT_GEOMETRY=16\n\
\n\
# The maintained octomap \n\
uint32 OCTOMAP=32\n\
\n\
# The maintained list of transforms\n\
uint32 TRANSFORMS=64\n\
\n\
# The allowed collision matrix\n\
uint32 ALLOWED_COLLISION_MATRIX=128\n\
\n\
# The default link padding and link scaling\n\
uint32 LINK_PADDING_AND_SCALING=256\n\
\n\
# The stored object colors\n\
uint32 OBJECT_COLORS=512\n\
\n\
# Bitfield combining options indicated above\n\
uint32 components\n\
\n\
";
  }

  static const char* value(const ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.components);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PlanningSceneComponents_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_msgs::PlanningSceneComponents_<ContainerAllocator>& v)
  {
    s << indent << "components: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.components);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_MSGS_MESSAGE_PLANNINGSCENECOMPONENTS_H
