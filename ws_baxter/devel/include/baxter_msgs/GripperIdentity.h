/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/p/peth8881/robotics/ws_baxter/src/baxter_common/baxter_msgs/msg/GripperIdentity.msg
 *
 */


#ifndef BAXTER_MSGS_MESSAGE_GRIPPERIDENTITY_H
#define BAXTER_MSGS_MESSAGE_GRIPPERIDENTITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace baxter_msgs
{
template <class ContainerAllocator>
struct GripperIdentity_
{
  typedef GripperIdentity_<ContainerAllocator> Type;

  GripperIdentity_()
    : name()
    , type(0)
    , hardware_id(0)
    , version_major(0)
    , version_minor(0)
    , revision_lsb(0)  {
    }
  GripperIdentity_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(0)
    , hardware_id(0)
    , version_major(0)
    , version_minor(0)
    , revision_lsb(0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _hardware_id_type;
  _hardware_id_type hardware_id;

   typedef uint8_t _version_major_type;
  _version_major_type version_major;

   typedef uint8_t _version_minor_type;
  _version_minor_type version_minor;

   typedef uint8_t _revision_lsb_type;
  _revision_lsb_type revision_lsb;


    enum { NO_GRIPPER = 0 };
     enum { SUCTION_CUP_GRIPPER = 1 };
     enum { PNEUMATIC_GRIPPER = 2 };
     enum { ELECTRIC_GRIPPER = 128 };
     enum { INVALID_GRIPPER_HARDWARE_ID = 0 };
 

  typedef boost::shared_ptr< ::baxter_msgs::GripperIdentity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baxter_msgs::GripperIdentity_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct GripperIdentity_

typedef ::baxter_msgs::GripperIdentity_<std::allocator<void> > GripperIdentity;

typedef boost::shared_ptr< ::baxter_msgs::GripperIdentity > GripperIdentityPtr;
typedef boost::shared_ptr< ::baxter_msgs::GripperIdentity const> GripperIdentityConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baxter_msgs::GripperIdentity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace baxter_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'baxter_msgs': ['/home/p/peth8881/robotics/ws_baxter/src/baxter_common/baxter_msgs/msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_msgs::GripperIdentity_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_msgs::GripperIdentity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_msgs::GripperIdentity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c423d2a28bbc9289e3befaa316bbb56";
  }

  static const char* value(const ::baxter_msgs::GripperIdentity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c423d2a28bbc928ULL;
  static const uint64_t static_value2 = 0x9e3befaa316bbb56ULL;
};

template<class ContainerAllocator>
struct DataType< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baxter_msgs/GripperIdentity";
  }

  static const char* value(const ::baxter_msgs::GripperIdentity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name       # Gripper type name\n\
uint8  type       # Gripper type identifier\n\
# Heartland gripper type enumeration:\n\
    uint8  NO_GRIPPER = 0\n\
    uint8  SUCTION_CUP_GRIPPER = 1\n\
    uint8  PNEUMATIC_GRIPPER = 2\n\
    uint8  ELECTRIC_GRIPPER = 128\n\
#\n\
uint8  hardware_id   # Gripper hardware id\n\
# Gripper hardware id enumeration:\n\
    uint8  INVALID_GRIPPER_HARDWARE_ID = 0\n\
uint8  version_major # Gripper version, 0 if none\n\
uint8  version_minor # Gripper version, 0 if none\n\
uint8  revision_lsb  # Gripper revision number, 0 if none\n\
\n\
";
  }

  static const char* value(const ::baxter_msgs::GripperIdentity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.hardware_id);
      stream.next(m.version_major);
      stream.next(m.version_minor);
      stream.next(m.revision_lsb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GripperIdentity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baxter_msgs::GripperIdentity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baxter_msgs::GripperIdentity_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "hardware_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hardware_id);
    s << indent << "version_major: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.version_major);
    s << indent << "version_minor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.version_minor);
    s << indent << "revision_lsb: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.revision_lsb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAXTER_MSGS_MESSAGE_GRIPPERIDENTITY_H
