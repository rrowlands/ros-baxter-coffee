"""autogenerated by genpy from baxter_msgs/GripperState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GripperState(genpy.Message):
  _md5sum = "0eac783439e05e6ea33b1ff617fab794"
  _type = "baxter_msgs/GripperState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The following Gripper State fields are tristate: 0 = false; 1 = true; 2 = unknown/unsupported
  uint8   STATE_FALSE = 0
  uint8   STATE_TRUE = 1
  uint8   STATE_UNKNOWN = 2
#
uint8   enabled             # true if enabled
uint8   calibrated          # true if calibration has completed
uint8   ready               # true if ready to grip
uint8   moving              # true if moving
uint8   gripping            # true if gripping
uint8   missed              # true if GRIP/GOTO/SET was commanded and the gripper reaches the end of travel
uint8   error               # true if the gripper is in an error state
#
uint8   command             # current gripper command, one of the following:
  # Note that while these have the same as values as the gripper opcodes they
  # are not used that way.
  uint8   CMD_IDLE            = 0 
  uint8   CMD_GET_ID          = 1
  uint8   CMD_RESET_ALL       = 2
  uint8   CMD_RESET_FSM       = 3
  uint8   CMD_CALIBRATE       = 4
  uint8   CMD_PREPARE_TO_GRIP = 5
  uint8   CMD_GRIP            = 6
  uint8   CMD_RELEASE         = 7
  uint8   CMD_GOTO            = 8
  uint8   CMD_STOP            = 9
  uint8   CMD_SET             = 10
  uint8   CMD_CLEAR_CALIBRATION = 11
#
float32 position            # position as a percentage of the max position;      0=closed - 100=open
#
  float32 POSITION_CLOSED = 0.0
  float32 POSITION_OPEN   = 100.0
#
float32 force               # force as a percentage of max force;                0=none   - 100=max
#
  float32 FORCE_MIN = 0.0
  float32 FORCE_MAX = 100.0
#

"""
  # Pseudo-constants
  STATE_FALSE = 0
  STATE_TRUE = 1
  STATE_UNKNOWN = 2
  CMD_IDLE = 0
  CMD_GET_ID = 1
  CMD_RESET_ALL = 2
  CMD_RESET_FSM = 3
  CMD_CALIBRATE = 4
  CMD_PREPARE_TO_GRIP = 5
  CMD_GRIP = 6
  CMD_RELEASE = 7
  CMD_GOTO = 8
  CMD_STOP = 9
  CMD_SET = 10
  CMD_CLEAR_CALIBRATION = 11
  POSITION_CLOSED = 0.0
  POSITION_OPEN = 100.0
  FORCE_MIN = 0.0
  FORCE_MAX = 100.0

  __slots__ = ['enabled','calibrated','ready','moving','gripping','missed','error','command','position','force']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enabled,calibrated,ready,moving,gripping,missed,error,command,position,force

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GripperState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.enabled is None:
        self.enabled = 0
      if self.calibrated is None:
        self.calibrated = 0
      if self.ready is None:
        self.ready = 0
      if self.moving is None:
        self.moving = 0
      if self.gripping is None:
        self.gripping = 0
      if self.missed is None:
        self.missed = 0
      if self.error is None:
        self.error = 0
      if self.command is None:
        self.command = 0
      if self.position is None:
        self.position = 0.
      if self.force is None:
        self.force = 0.
    else:
      self.enabled = 0
      self.calibrated = 0
      self.ready = 0
      self.moving = 0
      self.gripping = 0
      self.missed = 0
      self.error = 0
      self.command = 0
      self.position = 0.
      self.force = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8B2f.pack(_x.enabled, _x.calibrated, _x.ready, _x.moving, _x.gripping, _x.missed, _x.error, _x.command, _x.position, _x.force))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.enabled, _x.calibrated, _x.ready, _x.moving, _x.gripping, _x.missed, _x.error, _x.command, _x.position, _x.force,) = _struct_8B2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8B2f.pack(_x.enabled, _x.calibrated, _x.ready, _x.moving, _x.gripping, _x.missed, _x.error, _x.command, _x.position, _x.force))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.enabled, _x.calibrated, _x.ready, _x.moving, _x.gripping, _x.missed, _x.error, _x.command, _x.position, _x.force,) = _struct_8B2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8B2f = struct.Struct("<8B2f")
